#include <stdio.h>
#include <stdlib.h>
#include "validaciones.h"
#include "otros.h"
#include "menus.h"

#include "avion.h"
#define TAM_HCODE_A 5
#define TAM_HCODE_TD 4
#define TAM_AVION 1000
#define TAM_VUELO 2000

typedef struct{
	int id;
	char descripcion[20];
}eAerolinea;
typedef struct{
	int id;
	char descripcion[20];
}eTipo;
typedef struct{
	int dia;
	int mes;
	int anio;
}eFecha;
typedef struct{
	 int id;
	 char descripcion[25];
	 float precio;

}eDestino;
typedef struct{
	int id;
	int idAvion;
	int idDestino;
	eFecha fecha;
}eVuelo;




void listarAerolinea(eAerolinea aerolinea);
int listarAerolineas(eAerolinea aerolineas[], int tamHCodeA);
void listarTipo(eTipo tipos);
int listarTipos(eTipo tipos[], int tamHCodeTD);
void listarDestino(eDestino destinos);
int listarDestinos(eDestino destinos[], int tamHCodeTD);

void listarVuelo(eVuelo vuelos, eDestino destinos[],int tamTD);
int listarVuelos(eVuelo vuelos[], eDestino destinos[],int tamVuelo,int tamTD,int lenVuelos );

int validarDatos(eAerolinea aerolineas[], eTipo tipos[], int tamTD,int tamA, int* idAerolinea, int* idTipo, int* capacidad );



int buscarIndexPorIdAerolinea(eAerolinea aerolineas[], int tamA, int id);
int buscarIndexPorIdTipo(eTipo tipos[], int tamTD, int id);
int buscarIndexPorIdTipo(eTipo tipos[], int tamTD, int id);
int buscarIndexPorIdDestino(eDestino destinos[], int tamTD, int id);

int altaVuelo(eVuelo vuelos[], eAvion aviones[], eDestino destinos[],eAerolinea aerolineas[], eTipo tipos[],  int tamVuelos,int tamAviones, int tamTD, int tamA, int* idVuelo, int* indexVuelo);


int main(void) {
	setbuf(stdout,NULL);
	eAerolinea aerolineas[TAM_HCODE_A]={
			{1000,"Lan"},
			{1001,"Iberia"},
			{1002,"Norwegian"},
			{1003,"American,"},
			{1004,"Austral"}
	};
	eTipo tipos[TAM_HCODE_TD]={
			{5000,"Jet"},
			{5001,"Helice"},
			{5002,"Planeador"},
			{5003,"Carga"},
	};
	eDestino destinos[TAM_HCODE_TD]={
			{20000,"Calafate",100000},
			{20001,"Miami",100000},
			{20002,"Madrid",100000},
			{20003,"Amsterdam",100000},
	};

	eAvion aviones[TAM_AVION];
	int idIncrem=4000;
	inicializarArray(aviones, TAM_AVION);


	eVuelo vuelos[TAM_VUELO];
	int idInVuelo=40000;
	int indexVuelo=0;

	char salir='n';
	do{
			switch(menu()){
			case 1:

				if(altaAvion(aviones, aerolineas, tipos, TAM_AVION, TAM_HCODE_TD, TAM_HCODE_A, &idIncrem)==-1){
					printf("Error al validar punteros o tam menor a cero.\n");
				}else{
					printf("Se cargaron los datos con exito.\n");
				}
				break;
			case 2:
				if(existeRegistro(aviones, TAM_AVION)==0){
					if(modificarAvion(aviones, aerolineas, tipos, TAM_AVION, TAM_HCODE_A, TAM_HCODE_TD)==-1){
						printf("Error al validar punteros o tam menor a cero.\n");
					}else{
						printf("Se modifico con exito.\n");
					}
				}else{
					printf("Primero debe registrar un avion.\n");
				}
				break;
			case 3:
				if(existeRegistro(aviones, TAM_AVION)==0){
					if(bajaAvion(aviones, aerolineas, tipos, TAM_AVION, TAM_HCODE_A, TAM_HCODE_TD)==-1){
						printf("Error al validar punteros o tam menor a cero.\n");
					}
				}else{
					printf("Primero debe registrar un avion.\n");
				}
				break;
			case 4:
				if(listarAviones(aviones, aerolineas, tipos,TAM_AVION, TAM_HCODE_A, TAM_HCODE_TD)==-1){
					printf("HUbo un error al validar punteros.\n");
				}
				break;
			case 5:
				if(listarAerolineas(aerolineas, TAM_HCODE_A)==-1){
					printf("HUbo un error al validar punteros.\n");
				}
				break;
			case 6:
				if(listarTipos(tipos, TAM_HCODE_TD)==-1){
					printf("HUbo un error al validar punteros.\n");
				}
				break;
			case 7:
				if(listarDestinos(destinos, TAM_HCODE_TD)==-1){
					printf("HUbo un error al validar punteros.\n");
				}
				break;
			case 8:
				if(existeRegistro(aviones, TAM_AVION)==0){
					if(altaVuelo(vuelos, aviones,destinos, aerolineas, tipos, TAM_VUELO,TAM_AVION, TAM_HCODE_TD,TAM_HCODE_A,&idInVuelo, &indexVuelo)==-1){
						printf("Error al validar punteros o tam menor a cero.\n");
					}
				}else{
					printf("Primero debe registrar un avion.\n");
				}
				break;
			case 9:
				if(listarVuelos(vuelos, destinos,TAM_VUELO, TAM_HCODE_TD, indexVuelo)==-1){
					printf("HUbo un error al validar punteros.\n");
				}
				break;
			case 10:
				if(!cerrar(&salir)){
					printf("Hubo un problema con la validacion.\n");
				}
				break;
			}
			system("pause");
			system("cls");
		}while(salir!='s');
	return EXIT_SUCCESS;

}




/* ------------------------LISTADOS----------------------------------*/
void listarAerolinea(eAerolinea aerolinea){
	printf("%4d %15s\n",aerolinea.id, aerolinea.descripcion);
}
int listarAerolineas(eAerolinea aerolineas[], int tamHCodeA){
	int todoOk=-1;
	if(aerolineas!=NULL && tamHCodeA>0){
		system("cls");
		printf(".......................\n");
		printf("  ID      DESCRIPCION\n");
		printf(".......................\n");
		for(int i=0; i<tamHCodeA;i++){
			listarAerolinea(aerolineas[i]);
		}
		printf(".......................\n");
		todoOk=0;
	}
	return todoOk;
}

void listarTipo(eTipo tipos){
	printf("%4d %15s\n",tipos.id, tipos.descripcion);
}
int listarTipos(eTipo tipos[], int tamHCodeTD){
	int todoOk=-1;
	if(tipos!=NULL && tamHCodeTD>0){
		system("cls");
		printf(".......................\n");
		printf("  ID      DESCRIPCION\n");
		printf(".......................\n");
		for(int i=0; i<tamHCodeTD;i++){
			listarTipo(tipos[i]);
		}
		printf(".......................\n");
		todoOk=0;
	}
	return todoOk;
}
void listarDestino(eDestino destinos){
	printf("%4d %15s %10.2f\n",destinos.id,destinos.descripcion, destinos.precio);
}
int listarDestinos(eDestino destinos[], int tamHCodeTD){
	int todoOk=-1;
	if(destinos!=NULL && tamHCodeTD>0){
		system("cls");
		printf(".......................\n");
		printf("  ID      DESCRIPCION     PRECIO\n");
		printf(".......................\n");
		for(int i=0; i<tamHCodeTD;i++){
			listarDestino(destinos[i]);
		}
		printf(".......................\n");
		todoOk=0;
	}
	return todoOk;
}

void listarAvion(eAvion aviones,eAerolinea aerolineas[], eTipo  tipos[], int tamA, int tamTD){
	printf("%4d %15s %15s %10d\n",aviones.id, aerolineas[buscarIndexPorIdAerolinea(aerolineas,tamA, aviones.idAeroLinea)].descripcion, tipos[buscarIndexPorIdTipo(tipos, tamTD, aviones.idTipo)].descripcion,aviones.capacidad);
}
int listarAviones(eAvion aviones[],eAerolinea aerolineas[], eTipo  tipos[], int tamAviones, int tamA, int tamTD){
	int todoOk=-1;
	if(aviones!=NULL && tamAviones>0){
		system("cls");
		printf(".......................\n");
		printf("  ID      AEROLINEA     TIPO  CAPACIDAD\n");
		printf(".......................\n");
		for(int i=0; i<tamAviones;i++){
			if(aviones[i].isEmpty==0){
				listarAvion(aviones[i], aerolineas, tipos, tamA, tamTD);
			}
		}
		printf(".......................\n");
		todoOk=0;
	}
	return todoOk;
}

void listarVuelo(eVuelo vuelos, eDestino destinos[],int tamTD){
	printf("%4d %10d %15s %d/%d/%d\n", vuelos.id, vuelos.idAvion, destinos[buscarIndexPorIdDestino(destinos, tamTD, vuelos.idDestino)].descripcion,vuelos.fecha.dia ,vuelos.fecha.mes,vuelos.fecha.anio);
}
int listarVuelos(eVuelo vuelos[], eDestino destinos[],int tamVuelo,int tamTD,int lenVuelos ){
	int todoOk=-1;
	if(vuelos!=NULL && destinos!=NULL && tamVuelo>0 && tamTD>0){
		system("cls");
		printf(".......................\n");
		printf("  ID      COD-AVION     DESTINO  FECHA\n");
		printf(".......................\n");
		for(int i=0; i<lenVuelos;i++){
				listarVuelo(vuelos[i], destinos, tamTD);
		}
		printf(".......................\n");
		todoOk=0;
	}
	return todoOk;
}

/* ------------------------Alta----------------------------------*/
int altaAvion(eAvion aviones[], eAerolinea aerolineas[], eTipo tipos[],int  tamAviones, int tamTD, int tamA, int* idAviones){
	int todoOk=-1;
	int auxIndex;
	int idAerolinea;
	int idTipo;
	int capacidad;
	if(aviones!=NULL && aerolineas!=NULL && tipos!=NULL && idAviones!=NULL && tamAviones>0 && tamTD>0){

		auxIndex=buscarIndexLibre(aviones, tamAviones);
		if(auxIndex!=-1){
			if(validarDatos(aerolineas, tipos, tamTD,tamA, &idAerolinea, &idTipo, &capacidad)==0){


				aviones[auxIndex].id=*idAviones;
				aviones[auxIndex].idAeroLinea=idAerolinea;
				aviones[auxIndex].idTipo=idTipo;
				aviones[auxIndex].capacidad=capacidad;
				aviones[auxIndex].isEmpty=0;
				(*idAviones)++;

				todoOk=0;
			}else{
				printf("Error al validar punteros o tam menor a cero.\n");
			}
		}else{
			printf("No hay mas espacio.\n");
		}
	}
	return todoOk;
}
int validarDatos(eAerolinea aerolineas[], eTipo tipos[], int tamTD,int tamA, int* idAerolinea, int* idTipo, int* capacidad ){
	int todoOk=-1;
	int aux;
	if(aerolineas!=NULL && tipos!=NULL && idAerolinea!=NULL && idTipo!=NULL && capacidad!=NULL  && tamTD>0){
		listarAerolineas(aerolineas, tamA);
		do{
			cargarValidarEnteroPositivo("Ingrese el id la Aerolinea",idAerolinea);
			aux= buscarIndexPorIdAerolinea(aerolineas, tamA, *idAerolinea);
			if(aux==-1){
				printf("No se encontro el id. Vuelva a intentear.\n");
			}
		}while(aux==-1);

		listarTipos(tipos,tamTD);
		do{
			cargarValidarEnteroPositivo("Ingrese el id del tipo",idTipo);
			aux= buscarIndexPorIdTipo(tipos, tamTD, *idTipo);
			if(aux==-1){
				printf("No se encontro el id. Vuelva a intentear.\n");
			}
		}while(aux==-1);
		enteroEnRango("Ingrese la capacidad el avion (10-300)", capacidad,10,300);
		todoOk=0;
	}
	return todoOk;
}

/* ------------------------buscadores----------------------------------*/

int buscarIndexPorIdAerolinea(eAerolinea aerolineas[], int tamA, int id){

	int todoOk=-1;
	if(aerolineas!=NULL && tamA>0){
		for(int i=0; i<tamA; i++){
			if(aerolineas[i].id== id){
				todoOk=i;
				break;
			}
		}
	}
	return todoOk;
}
int buscarIndexPorIdAvion(eAvion aviones[], int tamAvion, int id){

	int todoOk=-1;
	if(aviones!=NULL && tamAvion>0){
		for(int i=0; i<tamAvion; i++){
			if(aviones[i].id== id && aviones[i].isEmpty==0){
				todoOk=i;
				break;
			}
		}
	}
	return todoOk;
}
int buscarIndexPorIdTipo(eTipo tipos[], int tamTD, int id){

	int todoOk=-1;
	if(tipos!=NULL && tamTD>0){
		for(int i=0; i<tamTD; i++){
			if(tipos[i].id== id){
				todoOk=i;
				break;
			}
		}
	}
	return todoOk;
}
int buscarIndexPorIdDestino(eDestino destinos[], int tamTD, int id){

	int todoOk=-1;
	if(destinos!=NULL && tamTD>0){
		for(int i=0; i<tamTD; i++){
			if(destinos[i].id== id){
				todoOk=i;
				break;
			}
		}
	}
	return todoOk;
}

/* ------------------------MODIFICAR  y BAJA----------------------------------*/
int modificarAvion(eAvion aviones[],eAerolinea aerolineas[],eTipo tipos[], int tamAvion, int tamA, int tamTD){
	int todoOk=-1;
	int id;
	int index;

	int aux;
	int idAerolinea;
	int idTipo;
	int capacidad;
	if(aviones!=NULL && aerolineas!=NULL && tipos!=NULL &&  tamAvion>0 && tamA>0 && tamTD>0){
		do{

			listarAviones(aviones, aerolineas, tipos,tamAvion, tamA, tamTD);
			cargarValidarEntero("Ingrese el id del Avion a modificar",&id);
			index=buscarIndexPorIdAvion(aviones, tamAvion, id);
			if(index==-1){
				printf("No se encontro el id seleccionado.\n");
				system("pause");
			}else{
				switch(menuModificar()){
				case 1:
					listarAerolineas(aerolineas,tamA);
					do{
						cargarValidarEnteroPositivo("Ingrese el id de la Aerolinea del Vuelo",&idAerolinea);
						aux= buscarIndexPorIdAerolinea(aerolineas, tamA, idAerolinea);
						if(aux==-1){
							printf("No se encontro el id. Vuelva a intentear.\n");
						}
					}while(aux==-1);
					aviones[index].idAeroLinea=idAerolinea;
					break;
				case 2:
					listarTipos(tipos, tamTD);
					do{
						cargarValidarEnteroPositivo("Ingrese el id del Tipo  del avion",&idTipo);
						aux= buscarIndexPorIdTipo(tipos, tamTD, idTipo);
						if(aux==-1){
							printf("No se encontro el id. Vuelva a intentear.\n");
						}
					}while(aux==-1);
					aviones[index].idTipo=idTipo;
					break;
				case 3:
					enteroEnRango("Ingrese la capacidad el avion (10-300)", &capacidad,10,300);
					aviones[index].capacidad=capacidad;
					break;
				}
			}
		}while(index==-1);
		todoOk=0;
	}
	return todoOk;
}

int bajaAvion(eAvion aviones[],eAerolinea aerolineas[],eTipo tipos[], int tamAvion, int tamA, int tamTD){
	int todoOk=-1;
	int index;
	int id;

	char confir;
	if(aviones!=NULL && aerolineas!=NULL && tipos!=NULL &&  tamAvion>0 && tamA>0 && tamTD>0){
		do{
			listarAviones(aviones, aerolineas, tipos,tamAvion, tamA, tamTD);
			cargarValidarEntero("Ingrese el id del Avion a dar de baja",&id);
			index=buscarIndexPorIdAvion(aviones, tamAvion, id);
			if(index==-1){
				printf("No se encontro el id seleccionado.\n");
				system("pause");

			}else{
				system("cls");
				printf("ATENCION:Por favor confirme si desea borrar el siguiente registro:\n\n");
				listarAvion(aviones[index], aerolineas, tipos, tamA, tamTD);
				cargarValidarCharEntreDos("Confirme (s/n)",&confir,'s','n');
				if(confir=='s'){
					aviones[index].isEmpty=1;
					printf("Se borro el resgistro\n");
				}else{
					printf("No se realizaron cambios.\n");
				}
			}
		}while(index==-1);
		todoOk=0;
	}
	return todoOk;
}
/* ------------------------VUELO----------------------------------*/
int altaVuelo(eVuelo vuelos[], eAvion aviones[], eDestino destinos[],eAerolinea aerolineas[], eTipo tipos[],  int tamVuelos,int tamAviones, int tamTD, int tamA, int* idVuelo, int* indexVuelo){
	int todoOk=-1;
	int idAvion;
	int idDestino;
	int dia;
	int mes;
	int anio;

	int index;
	int idAux;
	if(vuelos!=NULL && aviones!=NULL && destinos!=NULL && idVuelo!=NULL && indexVuelo!=NULL && tamVuelos>0 && tamAviones>0 && tamTD>0){
		do{
			listarAviones(aviones,aerolineas, tipos, tamAviones,tamA, tamTD);
			cargarValidarEntero("Ingrese el id Avion",&idAux);
			index=buscarIndexPorIdAvion(aviones, tamAviones, idAux);
			if(index==-1){
				printf("No se encontro el id seleccionado.\n");
				system("pause");
			}else{
				idAvion=aviones[index].id;
			}
		}while(index==-1);


		do{
			listarDestinos(destinos, tamTD);
			cargarValidarEntero("Ingrese el id del destino",&idAux);
			index=buscarIndexPorIdDestino(destinos, tamTD, idAux);
			if(index==-1){
				printf("No se encontro el id seleccionado.\n");
				system("pause");
			}else{
				idDestino=destinos[index].id;
			}
		}while(index==-1);
		cargarValidarFecha(&dia,&mes,&anio);

		vuelos[*indexVuelo].id=*idVuelo;
		vuelos[*indexVuelo].idAvion=idAvion;
		vuelos[*indexVuelo].idDestino=idDestino;
		vuelos[*indexVuelo].fecha.dia=dia;
		vuelos[*indexVuelo].fecha.mes=mes;
		vuelos[*indexVuelo].fecha.anio=anio;
		(*idVuelo)++;
		(*indexVuelo)++;
		printf("Se guardaron los datos con exito.\n");
		system("pause");

		todoOk=0;
	}
	return todoOk;
}
